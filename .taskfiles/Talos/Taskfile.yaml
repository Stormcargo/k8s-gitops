---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  TALHELPER_CLUSTER_DIR: '{{.KUBERNETES_DIR}}/bootstrap/talos/clusterconfig'
  TALHELPER_SECRET_FILE: '{{.KUBERNETES_DIR}}/bootstrap/talos/talsecret.sops.yaml'
  TALHELPER_CONFIG_FILE: '{{.KUBERNETES_DIR}}/bootstrap/talos/talconfig.yaml'
  HELMFILE_FILE: '{{.KUBERNETES_DIR}}/bootstrap/helmfile.yaml'

env:
  TALOSCONFIG: '{{.TALHELPER_CLUSTER_DIR}}/talosconfig'

tasks:
  test:
    cmds:
      - echo {{.TALOSCONFIG}}
      - echo {{.KUBERNETES_DIR}}
      - echo {{.TALHELPER_CONFIG_FILE}}

  bootstrap:
    desc: Bootstrap the Talos cluster
    dir: '{{.KUBERNETES_DIR}}/bootstrap/talos'
    cmds:
      - |
        if [ ! -f "{{.TALHELPER_SECRET_FILE}}" ]; then
            talhelper gensecret > {{.TALHELPER_SECRET_FILE}}
            sops --encrypt --in-place {{.TALHELPER_SECRET_FILE}}
        fi
      - talhelper genconfig --config-file {{.TALHELPER_CONFIG_FILE}} --secret-file {{.TALHELPER_SECRET_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}}
      - talhelper gencommand apply --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} --extra-flags="--insecure" | bash
      - until talhelper gencommand bootstrap --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} | bash; do sleep 10; done
      - task: conf
      - task: apps
      - talosctl health --server=false
    preconditions:
      - msg: Missing talhelper config file
        sh: test -f {{.TALHELPER_CONFIG_FILE}}
      - msg: Missing Sops config file
        sh: test -f {{.SOPS_CONFIG_FILE}}
      - msg: Missing Sops Age key file
        sh: test -f {{.SOPS_AGE_KEY_FILE}}

  upgrade:
    desc: Upgrade Talos on a node
    dir: '{{.KUBERNETES_DIR}}/bootstrap/talos'
    cmds:
      - talosctl --nodes {{.NODE}} upgrade --image {{.IMAGE}} --timeout=10m --reboot-mode={{.MODE}}
      - talosctl --nodes {{.NODE}} health --wait-timeout=10m --server=false
    vars:
      MODE: '{{.MODE | default "default"}}'
        # sh: talosctl get nodeannotationspecs --nodes {{.NODE}} -o jsonpath='{.spec.value}'
    requires:
      vars: ['NODE', 'IMAGE']
    preconditions:
      - msg: Missing talosconfig
        sh: test -f {{.TALOSCONFIG}}
      - msg: Unable to retrieve Talos config
        sh: talosctl config info &>/dev/null
      - msg: Node not found
        sh: talosctl --nodes {{.NODE}} get machineconfig >/dev/null 2>&1
      - msg: Upstream Talos version not found
        sh: |
          curl -fsSL -H "Authorization: Bearer $(curl -fsSL 'https://ghcr.io/token?scope=repository:siderolabs/talos:pull' | jq -r '.token')" https://ghcr.io/v2/siderolabs/talos/manifests/{{.VERSION}} &>/dev/null

  upgrade-k8s:
    desc: Upgrade Kubernetes across the cluster
    dir: '{{.KUBERNETES_DIR}}/bootstrap/talos'
    cmd: talosctl --nodes {{.NODE}} upgrade-k8s --to {{.VERSION}}
    requires:
      vars: ['NODE', 'VERSION']
    preconditions:
      - msg: Missing talosconfig
        sh: test -f {{.TALOSCONFIG}}
      - msg: Unable to retrieve Talos config
        sh: talosctl --nodes {{.NODE}} get machineconfig >/dev/null 2>&1
      - msg: Node not controller
        sh: talosctl config info --output json | jq --exit-status '.endpoints | index("{{.NODE}}") != null'

  nuke:
    desc: Resets nodes back to maintenance mode
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    prompt: This will destroy your cluster and reset the nodes back to maintenance mode... continue?
    cmd: talhelper gencommand reset --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} --extra-flags="--reboot {{- if eq .CLI_FORCE false }} --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL{{ end }} --graceful=false --wait=false" | bash

  conf:
    internal: true
    dir: '{{.KUBERNETES_DIR}}/bootstrap/talos'
    cmd: until talhelper gencommand kubeconfig --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} --extra-flags="{{.ROOT_DIR}} --force" | bash; do sleep 10; done
    preconditions:
      - msg: Missing talhelper config file
        sh: test -f {{.TALHELPER_CONFIG_FILE}}
  apps:
    internal: true
    dir: '{{.KUBERNETES_DIR}}/bootstrap/talos'
    cmds:
      - until kubectl wait --for=condition=Ready=False nodes --all --timeout=600s; do sleep 10; done
      - helmfile --file {{.HELMFILE_FILE}} apply --skip-diff-on-install --suppress-diff
      - until kubectl wait --for=condition=Ready nodes --all --timeout=600s; do sleep 10; done
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG}}
      - msg: Missing helmfile
        sh: test -f {{.HELMFILE_FILE}}

  reset:
    internal: true
    cmd: rm -rf {{.TALHELPER_CLUSTER_DIR}} {{.TALHELPER_SECRET_FILE}} {{.TALHELPER_CONFIG_FILE}}
