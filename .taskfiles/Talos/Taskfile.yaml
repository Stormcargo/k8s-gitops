---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  TALHELPER_CLUSTER_DIR: '{{.KUBERNETES_DIR}}/bootstrap/talos/clusterconfig'
  TALHELPER_SECRET_FILE: '{{.KUBERNETES_DIR}}/bootstrap/talos/talsecret.sops.yaml'
  TALHELPER_CONFIG_FILE: '{{.KUBERNETES_DIR}}/bootstrap/talos/talconfig.yaml'
  HELMFILE_FILE: '{{.KUBERNETES_DIR}}/bootstrap/helmfile.yaml'
  TALOSCONFIG: '{{.TALHELPER_CLUSTER_DIR}}/talosconfig'


env:
  TALOSCONFIG: '{{.TALOSCONFIG}}'


tasks:
  test:
    cmds:
      - echo {{.TALOSCONFIG}}
      - echo {{.KUBERNETES_DIR}}
      - echo {{.TALHELPER_CONFIG_FILE}}

  apply:
    desc: Apply Talos configuration to a node
    cmds:
      - talosctl --nodes {{.HOSTNAME}} apply-config --mode=staged --file {{.TALHELPER_CLUSTER_DIR}}/{{.CLUSTER_NAME}}-{{.HOSTNAME}}.yaml
      - talosctl --nodes {{.HOSTNAME}} reboot
      - talosctl --nodes {{.HOSTNAME}} health --wait-timeout=10m --server=false
    vars:
      CLUSTER_NAME:
        sh: yq '.clusterName' {{.TALHELPER_CONFIG_FILE}}
    requires:
      vars: [HOSTNAME]
    preconditions:
      - msg: Missing talosconfig
        sh: test -f {{.TALOSCONFIG}}
      - msg: Unable to retrieve Talos config
        sh: talosctl config info &>/dev/null
      - msg: Node not found
        sh: talosctl --nodes {{.HOSTNAME}} get machineconfig &>/dev/null
      - msg: Talos config for node not found
        sh: test -f {{.TALHELPER_CLUSTER_DIR}}/{{.CLUSTER_NAME}}-{{.HOSTNAME}}.yaml


  bootstrap:
    desc: Bootstrap the Talos cluster
    dir: '{{.KUBERNETES_DIR}}/bootstrap/talos'
    cmds:
      - |
        if [ ! -f "{{.TALHELPER_SECRET_FILE}}" ]; then
            talhelper gensecret > {{.TALHELPER_SECRET_FILE}}
            sops --encrypt --in-place {{.TALHELPER_SECRET_FILE}}
        fi
      - talhelper genconfig --config-file {{.TALHELPER_CONFIG_FILE}} --secret-file {{.TALHELPER_SECRET_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}}
      - talhelper gencommand apply --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} --extra-flags="--insecure" | bash
      - until talhelper gencommand bootstrap --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} | bash; do sleep 10; done
      - task: conf
      - task: apps
      - talosctl health --server=false
    preconditions:
      - msg: Missing talhelper config file
        sh: test -f {{.TALHELPER_CONFIG_FILE}}
      - msg: Missing Sops config file
        sh: test -f {{.SOPS_CONFIG_FILE}}
      - msg: Missing Sops Age key file
        sh: test -f {{.SOPS_AGE_KEY_FILE}}

  upgrade:
    desc: Upgrade Talos on a node
    cmds:
      - task: '{{if ne .ROLLOUT true}}up{{else}}noop{{end}}'
      - talosctl --nodes {{.NODE}} upgrade --image="factory.talos.dev/installer/{{.TALOS_SCHEMATIC_ID}}:{{.VERSION}}" --timeout=10m
      - talosctl --nodes {{.NODE}} health --wait-timeout=10m --server=false
      - task: '{{if ne .ROLLOUT true}}up{{else}}noop{{end}}'
    vars:
      TALOS_SCHEMATIC_ID:
        sh: talosctl get nodeannotationspecs --nodes {{.NODE}} -o jsonpath='{.spec.value}'
      TALOS_VERSION:
        sh: yq '.talosVersion' {{.TALHELPER_CONFIG_FILE}}
    requires:
      vars: ['NODE']
    preconditions:
      - msg: Missing talosconfig
        sh: test -f {{.TALOSCONFIG}}
      - msg: Unable to retrieve Talos config
        sh: talosctl config info &>/dev/null
      - msg: Node not found
        sh: talosctl --nodes {{.NODE}} get machineconfig &>/dev/null
      - msg: Upstream Talos version not found
        sh: curl -fsSL -o /dev/null --fail https://github.com/siderolabs/talos/releases/tag/{{.TALOS_VERSION}}

  upgrade-cluster:
    desc: Upgrade Talos on the whole cluster
    cmds:
      - task: down
      - for: { var: HOSTNAMES }
        task: upgrade-node
        vars:
          HOSTNAME: '{{.ITEM}}'
          ROLLOUT: true
      - task: up
    vars:
      HOSTNAMES:
        sh: kubectl get nodes --output=jsonpath='{.items[*].metadata.name}'

  upgrade-k8s:
    desc: Upgrade Kubernetes
    cmds:
      - talosctl --nodes {{.KUBERNETES_CONTROLLER}} upgrade-k8s --to {{.KUBERNETES_VERSION}}
    vars:
      KUBERNETES_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
      KUBERNETES_VERSION:
        sh: yq '.kubernetesVersion' {{.TALHELPER_CONFIG_FILE}}
    preconditions:
      - msg: Missing talosconfig
        sh: test -f {{.TALOSCONFIG}}
      - msg: Unable to retrieve Talos config
        sh: talosctl config info &>/dev/null
      - msg: Node not found
        sh: talosctl --nodes {{.KUBERNETES_CONTROLLER}} get machineconfig &>/dev/null
      - msg: Upstream Kubernetes version not found
        sh: curl -fsSL -o /dev/null --fail https://github.com/siderolabs/kubelet/releases/tag/{{.KUBERNETES_VERSION}}

  reset:
    desc: Resets nodes back to maintenance mode
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    prompt: This will destroy your cluster and reset the nodes back to maintenance mode... continue?
    cmd: talhelper gencommand reset --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} --extra-flags="--reboot {{- if eq .CLI_FORCE false }} --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL{{ end }} --graceful=false --wait=false" | bash

  conf:
    internal: true
    dir: '{{.KUBERNETES_DIR}}/bootstrap/talos'
    cmd: until talhelper gencommand kubeconfig --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} --extra-flags="{{.ROOT_DIR}} --force" | bash; do sleep 10; done
    preconditions:
      - msg: Missing talhelper config file
        sh: test -f {{.TALHELPER_CONFIG_FILE}}

  apps:
    internal: true
    dir: '{{.KUBERNETES_DIR}}/bootstrap/talos'
    cmds:
      - until kubectl wait --for=condition=Ready=False nodes --all --timeout=600s; do sleep 10; done
      - helmfile --file {{.HELMFILE_FILE}} apply --skip-diff-on-install --suppress-diff
      - until kubectl wait --for=condition=Ready nodes --all --timeout=600s; do sleep 10; done
    preconditions:
      - msg: Missing kubeconfig
        sh: test -f {{.KUBECONFIG}}
      - msg: Missing helmfile
        sh: test -f {{.HELMFILE_FILE}}

  down:
    internal: true
    cmd: flux --namespace flux-system suspend kustomization --all

  up:
    internal: true
    cmd: flux --namespace flux-system resume kustomization --all

  # Ref: https://github.com/go-task/task/issues/608
  noop:
    internal: true
    silent: true
    cmd: noop() { :; }
